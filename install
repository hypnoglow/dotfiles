#!/bin/bash
# This script installs all dotfiles by symlinking them to $HOME directory.
################################################################################

# Define params
DO_UPDATE=false
VERBOSE=false
DRY_RUN=false

# Process script's arguments
process_args() {
    for arg in "$@"
    do
    case "$arg" in
        -u|--update)
            DO_UPDATE=true
        ;;
        -v|--verbose)
            VERBOSE=true
        ;;
        -d|--dry-run)
            DRY_RUN=true
        ;;
        *)
        ;;
    esac
    done
}

# Do a self-update
self_update() {
    if [ "$DO_UPDATE" != true ] ; then
        return 0
    fi

    echo -n "Self updating... "

    local current_branch=$( git rev-parse --abbrev-ref HEAD )
    if [ "$current_branch" != "master" ] ; then
        git checkout master
    fi

    git pull --quiet --recurse-submodules
    git submodule update --quiet --init --recursive

    if [ "$current_branch" != "master" ] ; then
        git checkout "$current_branch"
    fi

    echo "done."
}

process_existing_file() {
    local dest=$1
    local v=$( [ "$VERBOSE" = true ] && echo "-v" )

    # if destination file is a symlink - delete it; else - backup
    if [ -L "$HOME/$dest" ] ; then
        if [ "$DRY_RUN" = true ] ; then
            echo "Removing $HOME/$dest"
        else
            rm $v "$HOME/$dest"
        fi
        return 0
    fi

    if [ -e "$HOME/$dest" ] ; then
        if [ ${DRY_RUN} = true ] ; then
            echo "Moving $HOME/$dest to $BACKUP_DIR/$dest"
        else
            mkdir -p $v $( dirname "$BACKUP_DIR/$dest" )
            mv -f $v "$HOME/$dest" "$BACKUP_DIR/$dest"
        fi
    fi
}

add_symlink() {
    local src=$1
    local dest=$2
    local v=$( [ "$VERBOSE" = true ] && echo "-v" )

    if [ "$DRY_RUN" = true ] ; then
        echo "Symlinking $HOME/$dest -> $DOTFILES_DIR/$src"
        return 0
    fi

    mkdir -p $v $( dirname "$HOME/$dest" )
    ln -sfn $v "$DOTFILES_DIR/$src" "$HOME/$dest"
}

process_args "$@"
self_update

DOTFILES_ROOT=$(dirname $( readlink -f ${BASH_SOURCE[0]} ))
DOTFILES_DIR="${DOTFILES_ROOT}/src"
BACKUP_DIR="$HOME/.dotfiles~"
MAPPING_DELIMETER="->"

echo "Saving DOTFILES_ROOT to .profile.d/dotfiles"
cat <<EOF > "${DOTFILES_DIR}/.profile.d/dotfiles.sh"
# THIS FILE IS GENERATED DYNAMICALLY, DO NOT CHANGE IT.
export DOTFILES_ROOT="${DOTFILES_ROOT}"
EOF

# All source files in ${DOTFILES_DIR} directory
# should be symlinked to $HOME relatively,
# according to the rules defined in mapper file.

echo "Installing dotfiles..."

while read line || [[ -n "$line" ]]; do
    # skip comments - lines starting with #
    [ "${line:0:1}" = "#" ] && continue

    # skip empty lines
    [ "${line}" = "" ] && continue

    src=`echo ${line%${MAPPING_DELIMETER}*}`
    dest=`echo ${line#*${MAPPING_DELIMETER}}`

    # Check if source file exists
    if [ ! -e "$DOTFILES_DIR/$src" ] ; then
        echo >&2 "Error: source file from mapping $DOTFILES_DIR/$src does not exist."
        continue
    fi

    process_existing_file "$dest"
    add_symlink "$src" "$dest"
done < "$DOTFILES_ROOT/mapping"

echo "Installation finished."
exit 0
