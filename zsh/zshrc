#
# User configuration sourced by interactive shells
#

########
# init #
########

# Start dotfiles debug log
. ${HOME}/.zsh/lib/mlog.sh
MLOG_ENABLED=${MLOG_ENABLED:-}
mlog::start

########
# Base #
########

# Set editor default keymap to emacs (`-e`) or vi (`-v`)
bindkey -e

################
# Zim pre-init #
################

#
# git
#

# Set a custom prefix for the generated aliases. The default prefix is 'G'.
zstyle ':zim:git' aliases-prefix 'g'


#
# zsh-syntax-highlighting
#

# Set what highlighters will be used.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters.md
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

############
# Zim init #
############

if [[ ${ZIM_HOME}/init.zsh -ot ${ZDOTDIR:-${HOME}}/.zimrc ]]; then
  # Update static initialization script if it's outdated, before sourcing it
  source ${ZIM_HOME}/zimfw.zsh init -q
fi
source ${ZIM_HOME}/init.zsh

mlog::print "Done Zim init"

#################
# Zim post-init #
#################

#####################
# zsh customization #
#####################

# MORE history
HISTFILE=~/.zhistory
HISTSIZE=100000
SAVEHIST=100000

# Remove older command from the history if a duplicate is to be added.
setopt HIST_IGNORE_ALL_DUPS

setopt INTERACTIVE_COMMENTS

# Prompt for spelling correction of commands.
#setopt CORRECT

# Customize spelling correction prompt.
#SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '

# Remove path separator from WORDCHARS.
#WORDCHARS=${WORDCHARS//[\/]}

###########
# Exports #
###########

export BAT_THEME="OneHalfLight" # https://github.com/sharkdp/bat
export PURE_PROMPT_SYMBOL="Î»" # https://github.com/sindresorhus/pure
export CLOUDSDK_PYTHON=python3
export KUBECONFIG="$HOME/.kube/config"
export SOURCES_ROOT="${HOME}/sources"
export DOTFILES_ROOT="${HOME}/sources/github.com/hypnoglow/dotfiles"
export EDITOR=vim

. ${HOME}/.zshrc.d/$(uname -s)/__exports.sh

###########
# Plugins #
###########

mlog::print "Loading plugins..."

[[ -d ~/.zplug ]] || {
    git clone https://github.com/zplug/zplug ${ZPLUG_HOME:-"${HOME}/.zplug"}
}

source ~/.zplug/init.zsh

# Fish shell feature.
# TODO: Check this. For now this is disabled, as zimfw manages it on its own.
# if [ "$TERM" != "linux" ]; then
#   zplug "zsh-users/zsh-autosuggestions"
# fi

# NOTE: these modules are loaded by zplug and not zim (zmanage), because otherwise
# a strange bug occurs: "sort: cannot read: 1: No such file or directory".
# See file 'zimrc'.
zplug "zsh-users/zsh-syntax-highlighting"
zplug "zsh-users/zsh-history-substring-search"

. ${HOME}/.zshrc.d/$(uname -s)/__plugins.sh

if ! zplug check --verbose; then
  printf "Install zsh plugins? [y/N]: "
  if read -q; then
    echo; zplug install
  fi
fi

zplug load

mlog::print "Loaded plugins."

############
# Includes #
############

mlog::print "Loading 'starship' includes..."

# Prompt. Note that other plugins that modify prompt must not be included BEFORE
# this, otherwise they will not take effect.
if type -f starship &> /dev/null; then
    eval "$(starship init zsh)"
fi

mlog::print "Loading 'autojump' includes..."

[ -f /usr/local/etc/profile.d/autojump.sh ] && . /usr/local/etc/profile.d/autojump.sh

mlog::print "Loadiing 'direnv'..."

# https://github.com/direnv/direnv
[ -x "$(which direnv 2>/dev/null)" ] && eval "$(direnv hook zsh)"

mlog::print "Loading 'aws cli' includes..."

aws_completion="/usr/local/bin/aws_zsh_completer.sh"
if [ -e "$aws_completion" ]; then
    source "$aws_completion"
fi
unset aws_completion

mlog::print "Loading 'gcloud' includes..."

gcloud_completion="/opt/google-cloud-sdk/completion.zsh.inc"
if [ -e "$gcloud_completion" ]; then
    source "$gcloud_completion"
fi
unset gcloud_completion

mlog::print "Loading 'kubectl' includes..."

if type -f kubectl &> /dev/null; then
    source <(kubectl completion zsh)
fi

mlog::print "Loading 'helm' includes..."

if type -f helm &> /dev/null; then
    # Temporary fix.
    # See: https://github.com/helm/helm/issues/5046#issuecomment-463576351
    #source <(helm completion zsh)
    source <(helm completion zsh)
fi

mlog::print "Loading 'minikube' includes..."

if [ -x "$(which minikube 2>/dev/null)" ]; then
    source <(minikube completion zsh)
fi

mlog::print "Loading 'stern' includes..."

if type -f stern &> /dev/null; then
    source <(stern --completion=zsh)
fi

mlog::print "Loading 'terraform' includes..."

if type -f terraform &> /dev/null; then
    autoload -U +X bashcompinit && bashcompinit
    complete -o nospace -C $(which terraform) terraform
fi

mlog::print "Loading 'kitty' includes..."

if type -f kitty &> /dev/null; then
    kitty + complete setup zsh | source /dev/stdin
fi

mlog::print "Loading 'golangci-lint' includes..."

if type -f golangci-lint &> /dev/null; then
    golangci-lint completion zsh | source /dev/stdin
fi

mlog::print "Loading '__includes.sh'..."

. ${HOME}/.zshrc.d/$(uname -s)/__includes.sh

mlog::print "Loading 'kube-ps1' includes..."

# https://github.com/jonmosco/kube-ps1
# NOTE: kube-ps1 must be included BEFORE this definition.
kube_ps1_precmd() {
    PROMPT='$(kube_ps1)'$PROMPT
}
if [ "${KUBE_PS1_SHELL}" = "zsh" ]; then
    KUBE_PS1_SUFFIX=") " # Add space to separate prompt symbol
    if type -f starship &> /dev/null; then
        precmd_functions+=(kube_ps1_precmd)
    else
        PROMPT='$(kube_ps1)'$PROMPT
    fi
fi

###########
# Aliases #
###########

mlog::print "Loading aliases..."

. ${HOME}/.zshrc.d/__aliases.sh
. ${HOME}/.zshrc.d/$(uname -s)/__aliases.sh

mlog::print "Loaded aliases."

###############
# Keybindings #
###############

mlog::print "Loading keybindings..."

. ${HOME}/.zshrc.d/__keybindings.sh
. ${HOME}/.zshrc.d/$(uname -s)/__keybindings.sh

mlog::print "Loaded keybindings."

#########
# Local #
#########

if [ -d ${HOME}/.zshrc.d/local ]; then
    mlog::print "Loading local zsh includes..."
    for file in ${HOME}/.zshrc.d/local/*.sh ; do
        [ -r ${file} ] && . ${file}
        mlog::print "Loaded file ${file}"
    done
    unset file
    mlog::print "Loaded local zsh includes"
fi

####################
# Finish & Cleanup #
####################

mlog::print "Loaded all."
mlog::cleanup
unset MLOG_ENABLED
