#
# User configuration sourced by interactive shells
#

###########################
# init base configuration #
###########################

# Start dotfiles debug log
. ${HOME}/.zsh/lib/mlog.sh
MLOG_ENABLED=${MLOG_ENABLED:-}
mlog::start
mlog::print "Logging enabled"

# Set editor default keymap to emacs (`-e`) or vi (`-v`)
bindkey -e

#
# history
#

HISTFILE=~/.zhistory
HISTSIZE=10000000
SAVEHIST=10000000
HISTORY_IGNORE='([bf]g *|cd ..|l[alsh]#( *)#|less *|(n)vim *|cd|pwd|exit|z(i) *)'

# https://zsh.sourceforge.io/Doc/Release/Options.html (16.2.4 History)
setopt EXTENDED_HISTORY      # Write the history file in the ':start:elapsed;command' format.
setopt INC_APPEND_HISTORY    # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY         # Share history between all sessions.
setopt HIST_IGNORE_DUPS      # Do not record an event that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS  # Delete an old recorded event if a new event is a duplicate.
setopt HIST_IGNORE_SPACE     # Do not record an event starting with a space.
setopt HIST_SAVE_NO_DUPS     # Do not write a duplicate event to the history file.
setopt HIST_VERIFY           # Do not execute immediately upon history expansion.
setopt APPEND_HISTORY        # append to history file (Default)
setopt HIST_NO_STORE         # Don't store history commands
setopt HIST_REDUCE_BLANKS    # Remove superfluous blanks from each command line being added to the history.

#
# misc
#

setopt INTERACTIVE_COMMENTS

# Also zim recommended default settings:
# https://github.com/zimfw/install/blob/master/src/templates/zshrc

###########
# Exports #
###########

export PURE_PROMPT_SYMBOL="Î»" # https://github.com/sindresorhus/pure
export CLOUDSDK_PYTHON=python3.9
export KUBECONFIG="$HOME/.kube/config"
export EDITOR=vim
export LESS='--chop-long-lines --ignore-case --jump-target=4 --LONG-PROMPT --no-init --quit-if-one-screen --RAW-CONTROL-CHARS'

export SOURCES_ROOT="${HOME}/sources"
export CODE_ROOT="${HOME}/code"
[ -d "${SOURCES_ROOT}/github.com/hypnoglow/dotfiles" ] && export DOTFILES_ROOT="${SOURCES_ROOT}/github.com/hypnoglow/dotfiles"
[ -d "${CODE_ROOT}/github.com/hypnoglow/dotfiles" ] && export DOTFILES_ROOT="${CODE_ROOT}/github.com/hypnoglow/dotfiles"
[ -d "${HOME}/Developer/github.com/hypnoglow/dotfiles" ] && export DOTFILES_ROOT="${HOME}/Developer/github.com/hypnoglow/dotfiles"

. ${HOME}/.zshrc.d/$(uname -s)/__exports.sh

#
# Go
#

# If not set, then asdf will install modules inside the particular version directory,
# which results in duplication of the same module in different versions.
export GOPATH="${HOME}/go"

if [ "$(uname -s)" = "Darwin" ]; then
  # See: https://github.com/golang/go/issues/61229#issuecomment-1988965927
  # See: https://github.com/golang/go/issues/63135
  export CGO_LDFLAGS="-Wl,-no_warn_duplicate_libraries"
fi

#
# usql
#

if [ "$(uname -s)" = "Darwin" ]; then
  # See: https://github.com/xo/usql?tab=readme-ov-file#terminal-graphics
  export USQL_TERM_GRAPHICS="iterm"
fi

####################
# Pre-Zim Includes #
####################

mlog::print "Loading brew prefix..."

# TODO: clean after all loaded
brew_prefix="$(brew --prefix)"

mlog::print "Loading 'starship' includes..."

# Prompt. Note that other plugins that modify prompt must not be included BEFORE
# this, otherwise they will not take effect.
if type -f starship &> /dev/null; then
    eval "$(starship init zsh)"
fi

mlog::print "Loading 'direnv'..."

# https://github.com/direnv/direnv
[ -x "$(which direnv 2>/dev/null)" ] && eval "$(direnv hook zsh)"

mlog::print "Loading 'aws cli' includes..."

aws_completion="/usr/local/bin/aws_zsh_completer.sh"
if [ -e "$aws_completion" ]; then
    source "$aws_completion"
fi
unset aws_completion

mlog::print "Loading 'gcloud' includes..."

# NOTE:
# File $(brew --prefix)/share/google-cloud-sdk/path.zsh.inc contains a PATH export
# for all bins. We don't need them most of the time, so we don't source it.

gcloud_completion_Darwin="${brew_prefix}/share/google-cloud-sdk/completion.zsh.inc"
gcloud_completion_Linux="/opt/google-cloud-sdk/completion.zsh.inc"
gcloud_completion="gcloud_completion_$(uname -s)"
if [ -e "${(P)gcloud_completion}" ]; then
    source "${(P)gcloud_completion}"
fi

unset gcloud_completion_Darwin gcloud_completion_Linux



mlog::print "Loading 'kitty' includes..."

if type -f kitty &> /dev/null; then
    kitty + complete setup zsh | source /dev/stdin
fi

#
# kube-ps1
#

mlog::print "Loading 'kube-ps1' includes..."

# https://github.com/jonmosco/kube-ps1

__include_kube_ps1_Darwin() {
    if [ -f /usr/local/opt/kube-ps1/share/kube-ps1.sh ]; then
        . /usr/local/opt/kube-ps1/share/kube-ps1.sh
    fi
    if [ -f /opt/homebrew/opt/kube-ps1/share/kube-ps1.sh ]; then
        . /opt/homebrew/opt/kube-ps1/share/kube-ps1.sh
    fi
}

__include_kube_ps1_Linux() {
    if [ ! -d "${HOME}/sources/github.com/jonmosco/kube-ps1" ]; then
        git clone --branch v0.7.0 https://github.com/jonmosco/kube-ps1.git ${HOME}/sources/github.com/jonmosco/kube-ps1
    fi
    . "${HOME}/sources/github.com/jonmosco/kube-ps1/kube-ps1.sh"
}

__include_kube_ps1_$(uname -s)
unset -f __include_kube_ps1_Darwin __include_kube_ps1_Linux

if type -f kube_ps1 &> /dev/null; then
    KUBE_PS1_SUFFIX=") " # Add space to separate prompt symbol
    PROMPT='$(kube_ps1)'$PROMPT
fi

# iTerm2 Shell Integration
if [ -f ${HOME}/.iterm2_shell_integration.zsh ]; then
    source ${HOME}/.iterm2_shell_integration.zsh
fi

#
# lazygit
#

lazygit_configs=(
    "${HOME}/Library/Application Support/lazygit/config.yml"
    "${HOME}/Library/Application Support/lazygit/config.custom.yml"
)

export LG_CONFIG_FILE=""

for lazygit_config in "${lazygit_configs[@]}"; do
    if [ -f "${lazygit_config}" ]; then
        LG_CONFIG_FILE="${LG_CONFIG_FILE},${lazygit_config}"
    fi
done
LG_CONFIG_FILE="${LG_CONFIG_FILE#,}"

unset lazygit_configs lazygit_config

################
# Zim pre-init #
################

#
# git
#

# Set a custom prefix for the generated aliases. The default prefix is 'G'.
zstyle ':zim:git' aliases-prefix 'g'

#
# zsh-syntax-highlighting
#

# Set what highlighters will be used.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters.md
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

############
# Zim init #
############

mlog::print "Loading 'zimfw'..."

# Download zimfw plugin manager if missing.
if [[ ! -e ${ZIM_HOME}/zimfw.zsh ]]; then
  curl -fsSL --create-dirs -o ${ZIM_HOME}/zimfw.zsh \
      https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
fi

if [[ ! ${ZIM_HOME}/init.zsh -nt ${ZDOTDIR:-${HOME}}/.zimrc ]]; then
  # Install missing modules, and update ${ZIM_HOME}/init.zsh if missing or outdated.
  source ${ZIM_HOME}/zimfw.zsh init -q
fi
source ${ZIM_HOME}/init.zsh

mlog::print "Loaded 'zimfw'."

#################
# Zim post-init #
#################

zmodload -F zsh/terminfo +p:terminfo

#####################
# Post-Zim Includes #
#####################

# Note: some scripts require enabling after compinit for completions to work.
#       So, we load them after zimfw.

mlog::print "Loading 'zoxide' ..."

[ -x "$(which zoxide 2>/dev/null)" ] && eval "$(zoxide init zsh)"

# Reference:
# https://carapace-sh.github.io/carapace-bin/setup.html
mlog::print "Loading 'carapace' ..."

if [ -x "$(which carapace 2>/dev/null)" ]; then
  export CARAPACE_BRIDGES='zsh,fish,bash,inshellisense' # optional
  zstyle ':completion:*' format $'\e[2;37mCompleting %d\e[m'
  source <(carapace _carapace)
fi

# Reference:
# https://github.com/asdf-vm/asdf
mlog::print "Loading 'asdf-vm' ..."

if [ "$(uname -s)" = "Darwin" ]; then
    if [ -e "$(brew --prefix asdf)/libexec/asdf.sh" ]; then
        . $(brew --prefix asdf)/libexec/asdf.sh
    fi
elif [ "$(uname -s)" = "Linux" ]; then
    if [ -e "/opt/asdf-vm" ]; then
        . /opt/asdf-vm/asdf.sh
    fi
fi

export PATH="${ASDF_DATA_DIR:-$HOME/.asdf}/shims:$PATH"

mlog::print "Loading 'golangci-lint' ..."

if type -f golangci-lint &> /dev/null; then
    golangci-lint completion zsh | source /dev/stdin
fi

mlog::print "Loading 'kubectl' ..."

if type -f kubectl &> /dev/null; then
    source <(kubectl completion zsh)
fi

mlog::print "Loading 'helm' ..."

if type -f helm &> /dev/null; then
    # Temporary fix.
    # See: https://github.com/helm/helm/issues/5046#issuecomment-463576351
    #source <(helm completion zsh)
    source <(helm completion zsh)
fi

mlog::print "Loading 'minikube' ..."

if [ -x "$(which minikube 2>/dev/null)" ]; then
    source <(minikube completion zsh)
fi

mlog::print "Loading 'stern' ..."

if type -f stern &> /dev/null; then
    source <(stern --completion=zsh)
fi

mlog::print "Loading 'terraform' ..."

if type -f terraform &> /dev/null; then
    autoload -U +X bashcompinit && bashcompinit
    complete -o nospace -C $(which terraform) terraform
fi

###########
# Aliases #
###########

mlog::print "Loading aliases..."

. ${HOME}/.zshrc.d/__aliases.sh
. ${HOME}/.zshrc.d/$(uname -s)/__aliases.sh

if [ -x "$HOME/.claude/local/claude" ]; then
    alias claude="/Users/hypnoglow/.claude/local/claude"
fi

mlog::print "Loaded aliases."

###############
# Keybindings #
###############

mlog::print "Loading keybindings..."

. ${HOME}/.zshrc.d/__keybindings.sh
. ${HOME}/.zshrc.d/$(uname -s)/__keybindings.sh

mlog::print "Loaded keybindings."

#########
# Local #
#########

if [ -d ${HOME}/.zshrc.d/local ]; then
    mlog::print "Loading local zsh includes..."
    for file in ${HOME}/.zshrc.d/local/*.sh ; do
        [ -r ${file} ] && . ${file}
        mlog::print "Loaded file ${file}"
    done
    unset file
    mlog::print "Loaded local zsh includes"
fi

####################
# Finish & Cleanup #
####################

mlog::print "Loaded all."
mlog::cleanup
unset MLOG_ENABLED

######################################
# Show iTerm2 tip right before start #
######################################

if type -f it2tip &> /dev/null; then
    _color_orange="\e[33m"
    _color_reset="\e[0m"
    echo "\n${_color_orange}$(it2tip) ${_color_reset}\n"
    unset _color_orange _color_reset
fi

### Stuff below this line is a junk added automatically by commands ###
